library(StereoMorph)
digitizeImage(image.file = 'teste', shapes.file = 'shapes',
landmarks.ref = 'landmarks_erik.txt',
curves.ref = 'curves_erik.txt')
library(StereoMorph)
digitizeImage(image.file = 'teste', shapes.file = 'shapes',
landmarks.ref = 'landmarks_erik.txt',
curves.ref = 'curves_erik.txt')
digitizeImage(image.file = 'teste', shapes.file = 'shapes',
landmarks.ref = 'landmarks_erik.txt',
curves.ref = 'curves_erik.txt')
digitizeImage(image.file = 'teste', shapes.file = 'shapes',
landmarks.ref = 'landmarks_erik.txt',
curves.ref = 'curves_erik.txt')
install.package("Morpho")
install.package("morpho")
install.packages("Morpho")
library (Morpho)
load("~/oto_morpho_geo/Landmarks_sulcus/.Rhistory")
setwd("C:/Users/oliiv/OneDrive/Documentos/oto_morpho_geo/Landmarks_sulcus")
#importar coordenadas landmarks
con_nobilis <- readland.tps("Landmarks_TODOS.TPS", specID = "ID")
library (geomorph)
#importar coordenadas landmarks
con_nobilis <- readland.tps("Landmarks_TODOS.TPS", specID = "ID")
#importar coordenadas landmarks
haem_todos <- readland.tps("Landmarks_TODOS.TPS", specID = "ID")
#importar classifiers
haem_class <- read.csv("Haemulidae_separados_final.csv")
haem_gpa <- gpagen(haem_todos)
plot(haem_gpa)
library (geomorph)
library (segmented)
library (Morpho)
#importar coordenadas landmarks
haem_todos <- readland.tps("Landmarks_SEO_TUDO.TPS", specID = "ID")
#importar classifiers
haem_class <- read.csv("Haemulidae_separados_final.csv")
haem_gpa <- gpagen(haem_todos)
#PCA
PCA <- gm.prcomp(haem_gpa$coords)
PCA$sdev
plot(PCA)
plot(PCA, col = haem_class$Pop)
plot(PCA, col = haem_class$Sexo)
data ("plant")
head(plant)
lattice::xyplot(y~time,groups=group,auto.key=list(space="right"))
lattice::xyplot(y~time,groups=plant$group,auto.key=list(space="right"))
lattice::xyplot(plant$y~plant$time,groups=plant$group,auto.key=list(space="right"))
View(PCA)
PCA[["d"]]
PCA
PCA[["GLS"]]
plot(PCA, col = haem_class$Pop)
print(PCA)
summary(PCA)
View(PCA)
PCA[["d"]]
PCA[["x"]]
scores.PCA <- PCA$x
View(scores.PCA)
row.names(scores.PCA)
View(scores.PCA)
segmented(scores.PCA)
View(PCA)
PCA[["A"]]
PCA[["RV"]]
PCA[["d"]]
PCA
hist(PCA)
hist(PCA$x)
barplot(PCA)
barplot(PCA$x)
barplot(PCA$d)
View(PCA)
barplot(PCA$d, ylim = 0, 50)
barplot(PCA$d, ylim = c(0, 50))
barplot(PCA$d, ylim = c(0, 1))
barplot(PCA$d)
summary(PCA) #visualização dos resultados da PCA
scores.lm <- lm(scores.PCA ~ PCA)
scores.lm <- lm(scores.PCA ~ PCA$x)
scores.lm <- lm(scores.PCA ~ PCA$x, data = PCA)
summary(PCA) #visualização dos resultados da PCA
View(PCA)
pca.lm <- lm(PCA$x ~ PCA$d)
View(PCA)
PCA[["x"]]
View(scores.PCA)
pca.lm <- lm(PCA$x[1:34] ~ PCA$d)
teste <- segmented(pca.lm)
teste <- segmented(pca.lm, seg.Z = PCA$d)
PCA[["d"]]
teste <- segmented(pca.lm, seg.Z = ~PCA$d)
teste <- segmented(pca.lm, seg.Z = scores.PCA)
View(pca.lm)
eigen.PCA <- PCA$d
pca.lm <- lm(scores.PCA[1:34] ~ eigen.PCA)
teste <- segmented(pca.lm, seg.Z = eigen.PCA)
pca.lm <- lm(scores.PCA ~ eigen.PCA)
scores.PCA <- PCA$x[1:34] #scores de cada indivíduo
pca.lm <- lm(scores.PCA ~ eigen.PCA)
teste <- segmented(pca.lm, seg.Z = eigen.PCA)
teste <- segmented(pca.lm, seg.Z = ~eigen.PCA)
barplot(teste)
plot(teste)
teste <- segmented(pca.lm, seg.Z = ~scores.PCA)
plot(teste)
pca.lm <- lm(eigen.PCA ~ scores.PCA)
teste <- segmented(pca.lm, seg.Z = ~eigen.PCA)
plot(teste)
teste <- segmented(pca.lm, seg.Z = ~scores.PCA)
plot(teste)
library (ggplot2)
autoplot(PCA)
#PCA
PCA <- gm.prcomp(haem_gpa$coords, scale = TRUE)
library (ggfortify)
install.packages("ggfortify")
install.packages("ggfortify")
library (ggfortify)
library (ggfortify)
library (geomorph)
library (segmented)
library (Morpho)
library (ggplot2)
autoplot(PCA)
rm(list = ls())
library (geomorph)
library (segmented)
library (Morpho)
library (ggplot2)
library (ggfortify)
#importar coordenadas landmarks
haem_oto <- readland.tps("Landmarks_O_TUDO.TPS", specID = "ID")
#importar classifiers
haem_class <- read.csv("Haemulidae_separados_final.csv")
haem_oto_gpa <- gpagen(haem_oto)
plot(haem_oto_gpa)
habitat <- factor(haem_class$Habitat)
maturacao <- factor (haem_class$Maturacao)
local <- factor (haem_class$Localidade)
especie <- factor (haem_class$Pop)
sexo <- factor (haem_class$Sexo)
#PCA
PCA <- gm.prcomp(haem_oto_gpa$coords, scale = TRUE)
scores.PCA <- PCA$x[1:34] #scores de cada indivíduo
eigen.PCA <- PCA$d
head(eigen.PCA)
print(eigen.PCA)
scores.PCA <- PCA$x #scores de cada indivíduo
View(scores.PCA)
cvall <- CVA(scores.PCA, habitat)
View(cvall)
rm(list = ls())
library (geomorph)
library (segmented)
library (Morpho)
library (ggplot2)
library (ggfortify)
#importar coordenadas landmarks
haem_sulcus <- readland.tps("Landmarks_S_TUDO.TPS", specID = "ID")
#importar classifiers
haem_class <- read.csv("Haemulidae_separados_final.csv")
haem_sulcus_gpa <- gpagen(haem_sulcus)
habitat <- factor(haem_class$Habitat)
maturacao <- factor (haem_class$Maturacao)
local <- factor (haem_class$Localidade)
especie <- factor (haem_class$Pop)
sexo <- factor (haem_class$Sexo)
#PCA
PCA <- gm.prcomp(haem_sulcus_gpa$coords, scale = TRUE)
rm(list = ls())
library (geomorph)
library (segmented)
library (Morpho)
library (ggplot2)
library (ggfortify)
#importar coordenadas landmarks
haem_sulcus <- readland.tps("Landmarks_S_TUDO.TPS", specID = "ID")
#importar classifiers
haem_class <- read.csv("Haemulidae_separados_final.csv")
haem_sulcus_gpa <- gpagen(haem_sulcus)
habitat <- factor(haem_class$Habitat)
maturacao <- factor (haem_class$Maturacao)
local <- factor (haem_class$Localidade)
especie <- factor (haem_class$Pop)
sexo <- factor (haem_class$Sexo)
#PCA
PCA <- gm.prcomp(haem_sulcus_gpa$coords, scale = TRUE)
View(PCA)
PCA[["x"]]
scores.PCA <- PCA$x #scores de cada indivíduo
haem_gdf <- geomorph.data.frame (haem_sulcus_gpa, especie = especie, habitat = habitat,
maturacao = maturacao, sexo = sexo) #criar um geomorph data frame
haem_sulcus_disparidade <- morphol.disparity (haem_sulcus_gpa$coords ~ 1, groups = ~ habitat * maturacao,
data = haem_gdf, print.progress = FALSE)
print(haem_sulcus_disparidade)
haem_fit <- procD.lm(haem_sulcus_gpa$coords ~1, groups = ~habitat * maturacao,
data = haem_gdf, print.progress = FALSE)
#alometria usando a pca
pc.plot <- plotAllometry(haem_fit, haem_gdf$Csize, logsz = TRUE,
method = "size.shape", pch = 19,
col = as.numeric(interaction(haem_gdf$habitat, haem_gdf$maturacao)))
haem_sulcus_cva <- CVA (scores.PCA, c(habitat, maturacao))
haem_sulcus_cva <- CVA (scores.PCA, habitat)
typprobs <- typprobs (haem_sulcus_cva$CVscores, group = maturacao)
library (Morpho)
typprobs <- typprobs (haem_sulcus_cva$CVscores, group = maturacao)
typprobs <- typprobsClass (haem_sulcus_cva$CVscores, group = maturacao)
typprobs <- typprobClass (haem_sulcus_cva$CVscores, group = maturacao)
View(typprobs)
typprobs <- typprobClass (haem_sulcus_cva$CVscores, group = (maturacao, habitat))
typprobs <- typprobClass (haem_sulcus_cva$CVscores, group = c(maturacao, habitat))
typprobs <- typprobClass (haem_sulcus_cva$CVscores, group = habitat)
scatterplot (haem_sulcus_cva$CVscores [,1], haem_sulcus_cva$CVscores[,2], groups = typprobs$groupaffinCV,
smooth = FALSE, reg.line = FALSE)
scatterplot(haem_sulcus_cva$CVscores [,1], haem_sulcus_cva$CVscores[,2], groups = typprobs$groupaffinCV,
smooth = FALSE, reg.line = FALSE)
library (ggplot2)
library (ggfortify)
scatterplot(haem_sulcus_cva$CVscores [,1], haem_sulcus_cva$CVscores[,2],
groups = typprobs$groupaffinCV, smooth = FALSE, reg.line = FALSE)
typprobs <- typprobClass (haem_sulcus_cva$CVscores, group = maturacao)
if (require(car)) {
scatterplot(haem_sulcus_cva$CVscores [,1], haem_sulcus_cva$CVscores[,2],
groups = typprobs$groupaffinCV, smooth = FALSE, reg.line = FALSE)
}
install.packages(car)
install.packages("car")
if (require(car)) {
scatterplot(haem_sulcus_cva$CVscores [,1], haem_sulcus_cva$CVscores[,2],
groups = typprobs$groupaffinCV, smooth = FALSE, reg.line = FALSE)
}
plot (haem_sulcus_cva$CVscores, col = habitat, pch = as.numeric(habitat), typ = "n" asp = 1,
plot (haem_sulcus_cva$CVscores, col = habitat, pch = as.numeric(habitat), typ = "n", asp = 1,
xlab = paste ("1st canonical axis", paste (round(haem_sulcus_cva$Var[1,2], 1)"%"),
plot (haem_sulcus_cva$CVscores, col = habitat, pch = as.numeric(habitat), typ = "n", asp = 1,
xlab = paste ("1st canonical axis", paste (round(haem_sulcus_cva$Var[1,2], 1)"%")),
plot (haem_sulcus_cva$CVscores, col = habitat, pch = as.numeric(habitat), typ = "n", asp = 1,
xlab = paste ("1st canonical axis", paste (round(haem_sulcus_cva$Var[1,2], 1),"%")),
ylab = paste ("2nd canonical axis", paste (round(haem_sulcus_cva$Var[2,2], 1)), "%")))
plot (haem_sulcus_cva$CVscores, col = habitat, pch = as.numeric(habitat), typ = "n", asp = 1,
xlab = paste ("1st canonical axis", paste (round(haem_sulcus_cva$Var[1,2], 1),"%")),
ylab = paste ("2nd canonical axis", paste (round(haem_sulcus_cva$Var[2,2], 1), "%")))
text (haem_sulcus_cva$CVscores, as.character(habitat), col = as.numeric(habitat), cex = 7)
text (haem_sulcus_cva$CVscores, as.character(habitat), col = as.numeric(habitat), cex = 1)
plot (haem_sulcus_cva$CVscores, col = habitat, pch = as.numeric(habitat), typ = "n", asp = 1,
xlab = paste ("1st canonical axis", paste (round(haem_sulcus_cva$Var[1,2], 1),"%")),
ylab = paste ("2nd canonical axis", paste (round(haem_sulcus_cva$Var[2,2], 1), "%")))
text (haem_sulcus_cva$CVscores, as.character(habitat), col = as.numeric(habitat), cex = 1)
text (haem_sulcus_cva$CVscores, as.character(habitat), col = as.numeric(habitat), cex = 0.5)
plot (haem_sulcus_cva$CVscores, col = habitat, pch = as.numeric(habitat), typ = "n", asp = 1,
xlab = paste ("1st canonical axis", paste (round(haem_sulcus_cva$Var[1,2], 1),"%")),
ylab = paste ("2nd canonical axis", paste (round(haem_sulcus_cva$Var[2,2], 1), "%")))
text (haem_sulcus_cva$CVscores, as.character(habitat), col = as.numeric(habitat), cex = 0.5)
text (haem_sulcus_cva$CVscores, as.character(habitat), col = as.numeric(maturacao), cex = 0.5)
plot (haem_sulcus_cva$CVscores, col = habitat, pch = as.numeric (maturacao), typ = "n", asp = 1,
xlab = paste ("1st canonical axis", paste (round(haem_sulcus_cva$Var[1,2], 1),"%")),
ylab = paste ("2nd canonical axis", paste (round(haem_sulcus_cva$Var[2,2], 1), "%")))
text (haem_sulcus_cva$CVscores, as.character(habitat), col = as.numeric(maturacao), cex = 0.5)
lines (haem_sulcus_cva$CVscores[habitat == ii, 1][c(kk, kk[1])],
haem_sulcus_cva$CVscores[habitat == ii, 2][c(kk, kk[1])], col == jj)
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
library(lattice)
for (jj in 1:lengt (levels (habitat))) {
ii = levels(habitat) [jj]
kk = chull (haem_sulcus_cva$CVscores[habitat == ii, 1:2])
lines (haem_sulcus_cva$CVscores[habitat == ii, 1][c(kk, kk[1])],
haem_sulcus_cva$CVscores[habitat == ii, 2][c(kk, kk[1])], col == jj)
}
for (jj in 1:length (levels (habitat))) {
ii = levels(habitat) [jj]
kk = chull (haem_sulcus_cva$CVscores[habitat == ii, 1:2])
lines (haem_sulcus_cva$CVscores[habitat == ii, 1][c(kk, kk[1])],
haem_sulcus_cva$CVscores[habitat == ii, 2][c(kk, kk[1])], col == jj)
}
lines (haem_sulcus_cva$CVscores[habitat == ii, 1][c(kk, kk[1])],
haem_sulcus_cva$CVscores[habitat == ii, 2][c(kk, kk[1])], col = jj)
plot (haem_sulcus_cva$CVscores, col = habitat, pch = as.numeric (maturacao), typ = "n", asp = 1,
xlab = paste ("1st canonical axis", paste (round(haem_sulcus_cva$Var[1,2], 1),"%")),
ylab = paste ("2nd canonical axis", paste (round(haem_sulcus_cva$Var[2,2], 1), "%")))
text (haem_sulcus_cva$CVscores, as.character(habitat), col = as.numeric(maturacao), cex = 0.5)
for (jj in 1:length (levels (habitat))) {
ii = levels(habitat) [jj]
kk = chull (haem_sulcus_cva$CVscores[habitat == ii, 1:2])
lines (haem_sulcus_cva$CVscores[habitat == ii, 1][c(kk, kk[1])],
haem_sulcus_cva$CVscores[habitat == ii, 2][c(kk, kk[1])], col = jj)
}
plot (haem_sulcus_cva$CVscores, col = maturacao, pch = as.numeric (maturacao), typ = "n", asp = 1,
xlab = paste ("1st canonical axis", paste (round(haem_sulcus_cva$Var[1,2], 1),"%")),
ylab = paste ("2nd canonical axis", paste (round(haem_sulcus_cva$Var[2,2], 1), "%")))
text (haem_sulcus_cva$CVscores, as.character(habitat), col = as.numeric(maturacao), cex = 0.5)
plot (haem_sulcus_cva$CVscores, col = maturacao, pch = as.numeric (maturacao), typ = "n", asp = 1,
xlab = paste ("1st canonical axis", paste (round(haem_sulcus_cva$Var[1,2], 1),"%")),
ylab = paste ("2nd canonical axis", paste (round(haem_sulcus_cva$Var[2,2], 1), "%")))
text (haem_sulcus_cva$CVscores, as.character(maturacao), col = as.numeric(habitat), cex = 0.5)
for (jj in 1:length (levels (habitat))) {
ii = levels(habitat) [jj]
kk = chull (haem_sulcus_cva$CVscores[habitat == ii, 1:2])
lines (haem_sulcus_cva$CVscores[habitat == ii, 1][c(kk, kk[1])],
haem_sulcus_cva$CVscores[habitat == ii, 2][c(kk, kk[1])], col = jj)
}
plot (haem_sulcus_cva$CVscores, col = maturacao, pch = as.numeric (maturacao), typ = "n", asp = 1,
xlab = paste ("1st canonical axis", paste (round(haem_sulcus_cva$Var[1,2], 1),"%")),
ylab = paste ("2nd canonical axis", paste (round(haem_sulcus_cva$Var[2,2], 1), "%")))
text (haem_sulcus_cva$CVscores, as.character(maturacao), col = as.numeric(maturacao), cex = 0.5)
for (jj in 1:length (levels (habitat))) {
ii = levels(habitat) [jj]
kk = chull (haem_sulcus_cva$CVscores[habitat == ii, 1:2])
lines (haem_sulcus_cva$CVscores[habitat == ii, 1][c(kk, kk[1])],
haem_sulcus_cva$CVscores[habitat == ii, 2][c(kk, kk[1])], col = jj)
}
plot (haem_sulcus_cva$CVscores, col = habitat, pch = as.numeric (maturacao), typ = "n", asp = 1,
xlab = paste ("1st canonical axis", paste (round(haem_sulcus_cva$Var[1,2], 1),"%")),
ylab = paste ("2nd canonical axis", paste (round(haem_sulcus_cva$Var[2,2], 1), "%")))
text (haem_sulcus_cva$CVscores, as.character(habitat), col = as.numeric(maturacao), cex = 0.5)
text (haem_sulcus_cva$CVscores, as.character(maturacao), col = as.numeric(habitat), cex = 0.5)
plot (haem_sulcus_cva$CVscores, col = habitat, pch = as.numeric (maturacao), typ = "n", asp = 1,
xlab = paste ("1st canonical axis", paste (round(haem_sulcus_cva$Var[1,2], 1),"%")),
ylab = paste ("2nd canonical axis", paste (round(haem_sulcus_cva$Var[2,2], 1), "%")))
plot (haem_sulcus_cva$CVscores, col = habitat, pch = as.numeric (maturacao), typ = "n", asp = 1,
xlab = paste ("1st canonical axis", paste (round(haem_sulcus_cva$Var[1,2], 1),"%")),
ylab = paste ("2nd canonical axis", paste (round(haem_sulcus_cva$Var[2,2], 1), "%")))
text (haem_sulcus_cva$CVscores, as.character(maturacao), col = as.numeric(habitat), cex = 0.5)
for (jj in 1:length (levels (habitat))) {
ii = levels(maturacao) [jj]
kk = chull (haem_sulcus_cva$CVscores[maturacao == ii, 1:2])
lines (haem_sulcus_cva$CVscores[habitat == ii, 1][c(kk, kk[1])],
haem_sulcus_cva$CVscores[habitat == ii, 2][c(kk, kk[1])], col = jj)
}
kk = chull (haem_sulcus_cva$CVscores, habitat == ii, 1:2])
kk = chull (haem_sulcus_cva$CVscores, habitat == ii, [1:2])
kk = chull (haem_sulcus_cva$CVscores[habitat == ii, 1:2])
print(haem_sulcus_disparidade)
haem_sulcus_disparidade <- morphol.disparity (haem_sulcus_gpa$coords ~ 1, groups = ~ habitat * maturacao,
data = haem_gdf, print.progress = FALSE)
library (geomorph)
library (segmented)
library (Morpho)
library (ggplot2)
library (ggfortify)
#importar coordenadas landmarks
haem_sulcus <- readland.tps("Landmarks_S_TUDO.TPS", specID = "ID")
#importar classifiers
haem_class <- read.csv("Haemulidae_separados_final.csv")
haem_sulcus_gpa <- gpagen(haem_sulcus)
habitat <- factor(haem_class$Habitat)
maturacao <- factor (haem_class$Maturacao)
local <- factor (haem_class$Localidade)
especie <- factor (haem_class$Pop)
sexo <- factor (haem_class$Sexo)
#PCA
PCA <- gm.prcomp(haem_sulcus_gpa$coords, scale = TRUE)
haem_gdf <- geomorph.data.frame (haem_sulcus_gpa, especie = especie, habitat = habitat,
maturacao = maturacao, sexo = sexo) #criar um geomorph data frame
haem_sulcus_disparidade <- morphol.disparity (haem_sulcus_gpa$coords ~ 1, groups = ~ habitat * maturacao,
data = haem_gdf, print.progress = FALSE)
print(haem_sulcus_disparidade)
library (geomorph)
rm(list = ls())
library (geomorph)
library (segmented)
library (Morpho)
library (ggplot2)
library (ggfortify)
#importar coordenadas landmarks
haem_oto <- readland.tps("Landmarks_O_TUDO.TPS", specID = "ID")
#importar classifiers
haem_class <- read.csv("Haemulidae_separados_final.csv")
haem_oto_gpa <- gpagen(haem_oto)
plot(haem_oto_gpa)
habitat <- factor(haem_class$Habitat)
maturacao <- factor (haem_class$Maturacao)
local <- factor (haem_class$Localidade)
especie <- factor (haem_class$Pop)
sexo <- factor (haem_class$Sexo)
#PCA
PCA <- gm.prcomp(haem_oto_gpa$coords, scale = TRUE)
plot (PCA, col = maturacao)
scores.PCA <- PCA$x[:3] #scores de cada indivíduo
scores.PCA <- PCA$x[,:3] #scores de cada indivíduo
scores.PCA <- PCA$x[,1:3] #scores de cada indivíduo
View(scores.PCA)
haem_gdf <- geomorph.data.frame (haem_oto_gpa, especie = especie, habitat = habitat,
maturacao = maturacao, sexo = sexo) #criar um geomorph data frame
haem_oto_disparidade <- morphol.disparity (haem_oto_gpa$coords ~ 1, groups = ~ habitat * maturacao,
data = haem_gdf, print.progress = FALSE)
print(haem_oto_disparidade)
haem_fit <- procD.lm(haem_oto_gpa$coords ~1, groups = ~habitat * maturacao,
data = haem_gdf, print.progress = FALSE)
cvall <- CVA(scores.PCA, habitat)

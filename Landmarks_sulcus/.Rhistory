library(StereoMorph)
digitizeImage(image.file = 'teste', shapes.file = 'shapes',
landmarks.ref = 'landmarks_erik.txt',
curves.ref = 'curves_erik.txt')
library(StereoMorph)
digitizeImage(image.file = 'teste', shapes.file = 'shapes',
landmarks.ref = 'landmarks_erik.txt',
curves.ref = 'curves_erik.txt')
digitizeImage(image.file = 'teste', shapes.file = 'shapes',
landmarks.ref = 'landmarks_erik.txt',
curves.ref = 'curves_erik.txt')
digitizeImage(image.file = 'teste', shapes.file = 'shapes',
landmarks.ref = 'landmarks_erik.txt',
curves.ref = 'curves_erik.txt')
install.package("Morpho")
install.package("morpho")
install.packages("Morpho")
library (Morpho)
load("~/oto_morpho_geo/Landmarks_sulcus/.Rhistory")
setwd("C:/Users/oliiv/OneDrive/Documentos/oto_morpho_geo/Landmarks_sulcus")
#importar coordenadas landmarks
con_nobilis <- readland.tps("Landmarks_TODOS.TPS", specID = "ID")
library (geomorph)
#importar coordenadas landmarks
con_nobilis <- readland.tps("Landmarks_TODOS.TPS", specID = "ID")
#importar coordenadas landmarks
haem_todos <- readland.tps("Landmarks_TODOS.TPS", specID = "ID")
#importar classifiers
haem_class <- read.csv("Haemulidae_separados_final.csv")
haem_gpa <- gpagen(haem_todos)
plot(haem_gpa)
library (geomorph)
library (segmented)
library (Morpho)
#importar coordenadas landmarks
haem_todos <- readland.tps("Landmarks_SEO_TUDO.TPS", specID = "ID")
#importar classifiers
haem_class <- read.csv("Haemulidae_separados_final.csv")
haem_gpa <- gpagen(haem_todos)
#PCA
PCA <- gm.prcomp(haem_gpa$coords)
PCA$sdev
plot(PCA)
plot(PCA, col = haem_class$Pop)
plot(PCA, col = haem_class$Sexo)
data ("plant")
head(plant)
lattice::xyplot(y~time,groups=group,auto.key=list(space="right"))
lattice::xyplot(y~time,groups=plant$group,auto.key=list(space="right"))
lattice::xyplot(plant$y~plant$time,groups=plant$group,auto.key=list(space="right"))
View(PCA)
PCA[["d"]]
PCA
PCA[["GLS"]]
plot(PCA, col = haem_class$Pop)
print(PCA)
summary(PCA)
View(PCA)
PCA[["d"]]
PCA[["x"]]
scores.PCA <- PCA$x
View(scores.PCA)
row.names(scores.PCA)
View(scores.PCA)
segmented(scores.PCA)
View(PCA)
PCA[["A"]]
PCA[["RV"]]
PCA[["d"]]
PCA
hist(PCA)
hist(PCA$x)
barplot(PCA)
barplot(PCA$x)
barplot(PCA$d)
View(PCA)
barplot(PCA$d, ylim = 0, 50)
barplot(PCA$d, ylim = c(0, 50))
barplot(PCA$d, ylim = c(0, 1))
barplot(PCA$d)
summary(PCA) #visualização dos resultados da PCA
scores.lm <- lm(scores.PCA ~ PCA)
scores.lm <- lm(scores.PCA ~ PCA$x)
scores.lm <- lm(scores.PCA ~ PCA$x, data = PCA)
summary(PCA) #visualização dos resultados da PCA
View(PCA)
pca.lm <- lm(PCA$x ~ PCA$d)
View(PCA)
PCA[["x"]]
View(scores.PCA)
pca.lm <- lm(PCA$x[1:34] ~ PCA$d)
teste <- segmented(pca.lm)
teste <- segmented(pca.lm, seg.Z = PCA$d)
PCA[["d"]]
teste <- segmented(pca.lm, seg.Z = ~PCA$d)
teste <- segmented(pca.lm, seg.Z = scores.PCA)
View(pca.lm)
eigen.PCA <- PCA$d
pca.lm <- lm(scores.PCA[1:34] ~ eigen.PCA)
teste <- segmented(pca.lm, seg.Z = eigen.PCA)
pca.lm <- lm(scores.PCA ~ eigen.PCA)
scores.PCA <- PCA$x[1:34] #scores de cada indivíduo
pca.lm <- lm(scores.PCA ~ eigen.PCA)
teste <- segmented(pca.lm, seg.Z = eigen.PCA)
teste <- segmented(pca.lm, seg.Z = ~eigen.PCA)
barplot(teste)
plot(teste)
teste <- segmented(pca.lm, seg.Z = ~scores.PCA)
plot(teste)
pca.lm <- lm(eigen.PCA ~ scores.PCA)
teste <- segmented(pca.lm, seg.Z = ~eigen.PCA)
plot(teste)
teste <- segmented(pca.lm, seg.Z = ~scores.PCA)
plot(teste)
library (ggplot2)
autoplot(PCA)
#PCA
PCA <- gm.prcomp(haem_gpa$coords, scale = TRUE)
library (ggfortify)
install.packages("ggfortify")
install.packages("ggfortify")
library (ggfortify)
library (ggfortify)
library (geomorph)
library (segmented)
library (Morpho)
library (ggplot2)
autoplot(PCA)
